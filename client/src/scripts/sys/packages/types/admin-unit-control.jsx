

import React from 'react';
import { WaitIcon, SelectionBox } from '../../../components';
import FormUtils from '../../../forms/form-utils';


/**
 * Field control to be used in forms to allow the user to select an administrative unit
 */
export default class AdminUnitControl extends React.Component {

    static typeName() {
        return 'adminUnit';
    }

    /**
     * Display representation of the administrative unit
     * @param  {[type]} value [description]
     * @return {[type]}       [description]
     */
    static displayText(value) {
        if (!value) {
            return '';
        }

        const vals = [];
        let index = 4;
        while (index >= 0) {
            const p = value['p' + index];
            if (p) {
                vals.push(p.name);
            }
            index--;
        }

        return vals.join(', ');
    }


    constructor(props) {
        super(props);
        this.onChange = this.onChange.bind(this);

        this.state = { };
    }

    serverRequest(nextSchema, nextValue, nextResources) {
        // check if control must skip this request
        if (this.skipReq) {
            delete this.skipReq;
            return null;
        }

        // is request necessary ?
        if (this.props.schema.readOnly ||
            (nextValue === this.props.value && (this.props.resources || nextResources))) {
            return null;
        }

        return {
            cmd: 'adminUnit',
            params: { value: nextValue }
        };
    }


    /**
     * Called when the user changes the item selected
     * @param  {SyntheticEvent} evt The event generated by React
     */
    onChange(item) {
        if (!this.props.onChange) {
            return null;
        }

        const self = this;
        return val => {
            const auid = self.updateResources(item, val);

            // notify parent about the change
            this.props.onChange({ value: auid, schema: self.props.schema });
        };
    }

    /**
     * Update the resources when admin unit changes
     * @param  {[type]} item [description]
     * @param  {[type]} auid [description]
     * @return {[type]}      [description]
     */
    updateResources(item, au) {
        var auid = au ? au.id : null;

        // no admin unit selected ?
        if (!auid) {
            // is it not the first level ?
            if (item.level > 1) {
                // get the previous level
                const previtem = this.props.resources[item.level - 2];
                auid = previtem.selected;
            }
            item.selected = null;
            this.skipReq = true;
        }
        else {
            item.selected = auid;
            // if there is no children to load, avoid another request
            if (au.unitsCount === 0) {
                this.skipReq = true;
            }
        }

        // clear levels
        for (var i = item.level; i < 5; i++) {
            const res = this.props.resources[i];
            if (res) {
                res.selected = null;
                res.list = null;
            }
        }

        return auid;
    }


    /**
     * Rend the selection box with administrative units
     * @param  {[type]} item [description]
     * @return {[type]}      [description]
     */
    compRender(item) {
        const schema = this.props.schema || {};

        const ref = 'cb' + item.level;

        const self = this;

        const label = FormUtils.labelRender(item.label, schema.required);

        const errors = item.level === 1 ? this.props.errors : null;

        const val = item.selected ? item.list.find(doc => doc.id === item.selected) : null;

        return (
            <div key={item.level}>
                <SelectionBox ref={ref}
                    help={errors}
                    bsStyle={errors ? 'error' : null}
                    value={val}
                    optionDisplay="name"
                    type="select"
                    label={label}
                    onChange={self.onChange(item)}
                    noSelectionLabel="-"
                    options={item.list} />
                {item.fetching && <WaitIcon type="field" />}
            </div>
            );
    }


    readOnlyRender(schema) {
        const value = this.props.value;
        const s = AdminUnitControl.displayText(value);

        return FormUtils.readOnlyRender(s, schema.label);
    }


    render() {
        const schema = this.props.schema || {};
        if (schema.readOnly) {
            return this.readOnlyRender(schema);
        }

        if (!this.props.resources) {
            return null;
        }

        const self = this;
        const comps = this.props.resources
            .filter(item => item.list && item.list.length > 0)
            .map(item => self.compRender(item));

        return (
            <div>
                {comps}
            </div>
            );
    }
}


AdminUnitControl.propTypes = {
    value: React.PropTypes.any,
    onChange: React.PropTypes.func,
    schema: React.PropTypes.object,
    errors: React.PropTypes.any,
    resources: React.PropTypes.array
};
