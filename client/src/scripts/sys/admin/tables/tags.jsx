
import React from 'react';
import CRUD from '../../../commons/crud';
import CrudView from '../../packages/crud/crud-view';
import Profile from '../../../components/profile';
import Form from '../../../forms/form';


const crud = new CRUD('tag');

const queryFilters = {
    includeDisabled: true
};

// definition of the form fields to edit tags
const editorDef = {
    defaultProperties: {
        autoGenerated: doc => typeof doc.sqlCondition === 'string',
        active: true
    },
    controls: [
        {
            property: 'name',
            required: true,
            type: 'string',
            max: 200,
            label: __('form.name'),
            size: { md: 8 }
        },
        {
            property: 'active',
            type: 'yesNo',
            label: __('EntityState.ACTIVE'),
            size: { newLine: true, md: 6 },
            defaultValue: true
        },
        {
            property: 'autoGenerated',
            type: 'yesNo',
            required: true,
            label: __('Tag.autogenerated'),
            size: { md: 6 }
        },
        {
            type: 'group',
            visible: value => value.autoGenerated,
            controls: [
                {
                    property: 'consistencyCheck',
                    type: 'yesNo',
                    label: __('Tag.consistencyCheck'),
                    size: { newLine: true, md: 6 },
                    required: true,
                    defaultValue: false
                },
                {
                    property: 'sqlCondition',
                    type: 'text',
                    required: true,
                    label: __('Tag.sqlCondition'),
                    size: { md: 12 }
                }
            ]
        }
    ],
    title: doc => doc && doc.id ? __('admin.tags.edt') : __('admin.tags.new')
};

/**
 * The page controller of the public module
 */
export default class Tags extends React.Component {

    constructor(props) {
        super(props);
        this.cellRender = this.cellRender.bind(this);
    }

    cellRender(item) {
        let type;

        if (item.sqlCondition) {
            type = item.consistencyCheck ? 'autodanger' : 'auto';
        }
        else {
            type = 'manual';
        }

        type = 'prof-tag-' + type;

        return <Profile imgClass={type} fa="tag" title={item.name} size="small" />;
    }

    collapseCellRender(item) {
        const YesNo = Form.types.yesNo;
        const autoGenerated = (<div>
                                    <hr/>
                                    <dl className="dl-horizontal">
                                        <dt>{__('EntityState.ACTIVE') + ':'}</dt>
                                        <dd><YesNo value={item.active} noForm /></dd>
                                        <dt>{__('Tag.autogenerated') + ':'}</dt>
                                        <dd><YesNo value={!!item.sqlCondition} noForm /></dd>
                                        <dt>{__('Tag.consistencyCheck') + ':'}</dt>
                                        <dd><YesNo value={item.consistencyCheck} noForm /></dd>
                                        <dt>{__('Tag.sqlCondition') + ':'}</dt>
                                        <dd>{item.sqlCondition}</dd>
                                        <dt>{__('Tag.dailyUpdate') + ':'}</dt>
                                        <dd><YesNo value={item.dailyUpdate} noForm /></dd>
                                    </dl>
                                    <hr/>
                                </div>);

        const notAutoGenerated = (<div>
                                        <hr/>
                                        <dl className="dl-horizontal">
                                            <dt>{__('EntityState.ACTIVE') + ':'}</dt>
                                            <dd><YesNo value={item.active} noForm /></dd>
                                            <dt>{__('Tag.autogenerated') + ':'}</dt>
                                            <dd><YesNo value={(item.sqlCondition)} noForm /></dd>
                                        </dl>
                                        <hr/>
                                    </div>);

        var ret = (item.sqlCondition ? autoGenerated : notAutoGenerated);

        return (ret);
    }

    render() {
        // get information about the route of this page
        const data = this.props.route.data;

        return (
            <CrudView crud={crud}
                title={data.title}
                onCellRender={this.cellRender}
                onDetailRender={this.collapseCellRender}
                editorSchema={editorDef}
                perm={data.perm}
                queryFilters={queryFilters} />
        );
    }
}

Tags.propTypes = {
    route: React.PropTypes.object
};
