package org.msh.etbm.services.cases.tag;

import org.msh.etbm.db.entities.Tag;
import org.msh.etbm.services.session.usersession.UserRequestService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import java.util.List;
import java.util.UUID;

/**
 * Service to update cases tags links of auto generated tags
 * Created by Mauricio on 25/07/2016.
 */
@Service
public class AutoGenTagsCasesService {

    @PersistenceContext
    EntityManager entityManager;

    @Autowired
    UserRequestService userRequestService;

    /**
     * Update the cases of an auto generated tag
     *
     * @param tagId
     */
    @Transactional
    public boolean updateCases(UUID tagId) {
        Tag tag = entityManager.find(Tag.class, tagId);
        if (!tag.isAutogenerated()) {
            return false;
        }

        // remove previous tags
        String sql = "delete from tags_case where tag_id = :id";
        entityManager.createNativeQuery(sql).setParameter("id", tag.getId()).executeUpdate();

        UUID wsid = userRequestService.getUserSession().getWorkspaceId();

        // is tag active ?
        if (tag.isActive()) {
            // include new tags
            sql = "insert into tags_case (case_id, tag_id) " +
                    "select a.id, :tagId from tbcase a join patient p on p.id=a.patient_id " +
                    "where " + tag.getSqlCondition() + " and p.workspace_id = :id";

            entityManager.createNativeQuery(sql)
                    .setParameter("id", wsid)
                    .setParameter("tagId", tag.getId())
                    .executeUpdate();
        }

        return true;
    }

    /**
     * Update the auto generated tags of a case
     *
     * @param caseId
     */
    @Transactional
    public void updateTags(UUID caseId) {
        UUID wsid = userRequestService.getUserSession().getWorkspaceId();
        entityManager.joinTransaction();

        // get tags
        List<Tag> tags = entityManager.createQuery("from Tag t where t.active = true " +
                "and t.sqlCondition is not null and t.workspace.id = :wsid")
                .setParameter("wsid", wsid)
                .getResultList();

        if (tags.size() == 0) {
            return;
        }

        // erase all tags of the current case
        entityManager.createNativeQuery("delete from tags_case where case_id = '" + caseId.toString() + "' " +
                "and tag_id in (select id from tag where sqlCondition is not null)")
                .executeUpdate();

        // update tags
        String sql = "";
        for (Tag tag: tags) {
            if (!sql.isEmpty()) {
                sql += " union ";
            }

            sql += "select a.id, '" + tag.getId() + "'" +
                    " from tbcase a join patient p on p.id=a.patient_id " +
                    " and p.workspace_id = '" + wsid + "'" +
                    " and a.id = '" + caseId.toString() + "'" +
                    " and " + tag.getSqlCondition();
        }

        sql = "insert into tags_case (case_id, tag_id) " + sql;

        entityManager.createNativeQuery(sql).executeUpdate();
    }
}
