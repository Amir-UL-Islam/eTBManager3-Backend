package org.msh.etbm.web.templates;

import org.msh.etbm.commons.InvalidArgumentException;
import org.msh.etbm.commons.JsonParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletResponse;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

/**
 * Controller to expose the main page of the system (the root page)
 * Created by rmemoria on 26/8/15.
 */
@Controller
public class IndexController {

    @Value("${app.languages}")
    private String[] languages;

    @Value("${app.default-language}")
    private String defaultLanguage;

    @Value("${server.context-path:}")
    private String contextPath;

    @Value("${development:false}")
    private boolean development;

    @Autowired
    ResourceLoader resourceLoader;

    private Map<String, String> langMap;

    /**
     * Fill the page variables and return the name of the template page
     * @param model the injected model
     * @return
     */
    @RequestMapping("/")
    public String welcome(Map<String, Object> model, HttpServletResponse response) {
        model.put("languages", getLanguagesJS());
        model.put("path", contextPath);
        model.put("defaultLanguage", defaultLanguage);

        System.out.println(model.get("languages"));

        // avoid page to be included in the browser cache
        response.setHeader("Cache-Control", "no-store");
        response.setHeader("Pragma", "no-cache");
        response.setDateHeader("Expires", 0);

        return "index";
    }

    /**
     * Return the list of languages to be injected into JS code
     * @return String value
     */
    protected String getLanguagesJS() {
        return JsonParser.objectToJSONString(langMap);
    }

    /**
     * Create the list of languages supported by the application and its corresponding
     * Java Script file name
     * @throws IOException
     */
    @PostConstruct
    public void createLanguageMap() throws IOException {
        langMap = new HashMap<>();

        for (String lang: languages) {
            String fname = getJSAppFile(lang);

            if (fname != null) {
                langMap.put(lang, fname);
            }
        }
    }

    /**
     * Return the name of the JavaScript file name used to start up application in the browser
     * @param lang the language
     * @return the java script file to be used in the client side to start-up the application
     * @throws IOException
     */
    private String getJSAppFile(String lang) throws IOException {
        // if it's under development, return the app.js file generated by webpack in development
        if (development) {
            return "app.js";
        }

        // search for the manifest.json generated by webpack in production mode
        String resname = "classpath:static/scripts/" + lang + "/manifest.json";
        Resource res = resourceLoader.getResource(resname);

        // read the input string
        final InputStream in = res.getInputStream();
        BufferedReader br = new BufferedReader(new InputStreamReader(in));
        StringBuilder stringBuilder = new StringBuilder();
        String line;
        while ((line = br.readLine()) != null) {
            stringBuilder.append(line).append('\n');
        }
        br.close();

        // parse javascript to a map
        HashMap<String, String> map = JsonParser.parseString(stringBuilder.toString(), HashMap.class);

        // return the name used in the main java script
        String fname = map.get("main.js");

        if (fname == null) {
            throw new IllegalArgumentException("No name found in manifest.json for key main.js in language " + lang);
        }

        return fname;
    }
}
