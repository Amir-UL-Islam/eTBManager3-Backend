package org.msh.etbm.commons.indicators.variables;

import org.msh.etbm.commons.sqlquery.QueryDefs;
import org.springframework.context.ApplicationContext;

/**
 * Interface that must be implemented by classes that want to expose itself as a
 * report variable. A report variable is displayed in the report resulting table.
 *
 * @author Ricardo Memoria
 *
 */
public interface Variable {

    /**
     * Return the ID of the variable
     * @return The String ID
     */
    String getId();

    /**
     * Display name of the report element
     * @return
     */
    String getLabel();

    /**
     * Prepare the query to return the data necessary to be handled by the variable.
     * This method basically includes the fields to be returned, table joins and its restrictions (where clause)
     * @param def interface of {@link QueryDefs} to inject fields to select, joins and restrictions
     * @param iteration
     */
    void prepareVariableQuery(QueryDefs def, int iteration);

    /**
     * Convert a value returned from the database to another value. For example, a number that must be displayed as a string.
     * if more than 1 value is expected from the argument, the value represents an array, so a cast to Object[] must be done.
     * @param values
     * @return
     */
    Object createKey(Object values);


    /**
     * From the key created by the method <code>createKey()</code>, return the text to be displayed in the table cell
     * @param key is the object key created by the method <code>createKey()</code>
     * @return the text to be displayed for the key
     */
    String getKeyDisplay(Object key);

    /**
     * Compare two values of the variable. It follows the implementation of the {@link Comparable} interface. If more than 1 field is specified
     * to be returned from the data base, the parameters objects are actually an array of objects, so a proper cast must be done to the right value.
     * <p>
     * If just one field is specified, so val1 and val2 will point to this value
     * @param val1
     * @param val2
     * @return
     */
    int compareValues(Object val1, Object val2);

    /**
     * Compare two group values of the variable. This method does the same as <code>compareValues</code> does, but
     * it is called for group values generated by the <code>createGroupKey</code> method.
     * @param val1 is the group key value
     * @param val2 is another group key value to be compared with val1
     * @return 0 if val1 is equals to val2, -1 if val1 is bigger than val2 or 1 if val1 is lower than val2
     */
    int compareGroupValues(Object val1, Object val2);

    /**
     * Return the possible list of values of the variable. This list is used to initialize the data table
     * @return list of object keys that will be used to create a fix list of values in the indicator
     */
    Object[] getDomain();

    /**
     * Return the configuration options of a variable
     * @return instance of {@link VariableOptions}
     */
    VariableOptions getVariableOptions();

    /**
     * If the variable is grouped in two levels (by the method <code>isGrouped()</code>, this method is called
     * for each value to be converted to a group key
     * @param values
     * @return Object instance representing the group key
     */
    Object createGroupKey(Object values);

    /**
     * Convert a group object key to a text to be displayed to the user
     * @param key is the group key created before by <code>createGroupKey()</code> method
     * @return a text ready for displaying representing the key
     */
    String getGroupKeyDisplay(Object key);

    /**
     * Initialize the variable passing the instance of the ApplicationContext.
     * This is called just once when variable is created and before any other method,
     * in order to give the filter the possibility to get beans
     * @param context instance of ApplicationContext interface
     */
    void initialize(ApplicationContext context);

}
